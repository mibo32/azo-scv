# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

# pool:
#   name: AksServices

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: HelmScanning
  value: $(System.DefaultWorkingDirectory)/checkov
- name: HelmCHarts
  value: $(System.DefaultWorkingDirectory)/helmcharts
steps:
- task: HelmInstaller@0
  inputs:
    helmVersion: '3.x'
    installKubectl: true

- task: PowerShell@2
  displayName: "Pull and scan HelmCharts"
  inputs:
    filePath: './.azuredevops/scripts/importtoacr.ps1'
    workingDirectory: $(HelmCHarts)

# - script: |
#     helm repo add kubereboot https://kubereboot.github.io/charts
#     helm repo update 
#     helm pull kubereboot/kured
#     folder=$(pwd)
#     echo $folder
#     tar zxvf kured-4.0.2.tgz
#     docker pull bridgecrew/checkov
#     docker run --tty --volume $(System.DefaultWorkingDirectory):/tf --workdir /tf bridgecrew/checkov --directory /tf --output junitxml -o sarif -o github_failed_only > $(System.DefaultWorkingDirectory)/Checkov-Report.xml
#     sed -i '$ d'  $(System.DefaultWorkingDirectory)/Checkov-Report.xml
#     sed -i '$ d'  $(System.DefaultWorkingDirectory)/Checkov-Report.xml
#     # docker run --tty --volume $folder:/tf --workdir /tf bridgecrew/checkov --directory /tf
#     cat Checkov-Report.xml
#   displayName: 'Run a multi-line script'
  
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)'
    artifact: 'results'
    publishLocation: 'pipeline'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/*Checkov-Report.xml'
    testRunTitle: 'Checkov Tests'
    failTaskOnFailedTests: true
